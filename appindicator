#!/usr/bin/env python

import gi.repository
import mechanize
import sys
import socket
import fcntl
import struct
import os
import json
import netifaces
gi.require_version('Gtk', '3.0')
gi.require_version('AppIndicator3', '0.1')
gi.require_version('Notify', '0.7')
from gi.repository import Gtk
from gi.repository import AppIndicator3 as appindicator
from gi.repository import Notify

def notify(appName, summary, body, icon):
  Notify.init(appName)
  notification = Notify.Notification.new(summary, body, icon)
  notification.show()
  Notify.uninit()

def get_login_status():
  br = mechanize.Browser()
  try:
    br.open("https://internet.iitb.ac.in/index.php")
  except Exception as e:
    br.close()
    notify("IITB Internet Login", "Error opening URL", str(e), "dialog-error")
  if(br.geturl() == "https://internet.iitb.ac.in/index.php"):
    return True
  else:
    return False;

def on_click_login(w, indicator):
  config = ".config"

  # instantiate mechanize browser
  br = mechanize.Browser()
  try:
    br.open("https://internet.iitb.ac.in/index.php")
  except Exception as e:
    br.close()
    notify("IITB Internet Login", "Error opening URL", str(e), "dialog-error")


  # Check Authentication status
  if(br.geturl() == "https://internet.iitb.ac.in/index.php"):
    # Read file: credentials & retrieve username and password
    with open(config,'r') as infile:
      data = json.load(infile)
    username=data['username']
    password=data['password']
    infile.close()

    # Authenticate @ internet.iitb.ac.in
    br.select_form(name="auth")
    br["uname"] = username
    br["passwd"] = password
    response = br.submit()  # submit current form
    if (response.read().find("window.location.href='https://internet.iitb.ac.in/logout.php'") != -1):
      notify("IITB Internet Login", "Authenticated", "", "dialog-information")
      menu = getMenu(0, indicator)
      indicator.set_menu(menu)
      indicator.set_icon(os.path.abspath('.icons/connected-' + theme + '.svg'))
  # If already Authenticated then do nothing
    else:
      notify("IITB Internet Login", "Bad Username of Password", "", "dialog-error")
  else:
    notify("IITB Internet Login", "Already Authenticated", "", "dialog-information")
    menu = getMenu(0, indicator)
    indicator.set_menu(menu)
    indicator.set_icon(os.path.abspath('.icons/connected-' + theme + '.svg'))

  # destroy instantiation of mechanize browser
  br.close()

def on_click_logout(w, indicator):
  # get IP of interface
  def get_ip_address(ifname):
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    return socket.inet_ntoa(fcntl.ioctl(
      s.fileno(),
      0x8915,  # SIOCGIFADDR
      struct.pack('256s', ifname[:15])
    )[20:24])

  # instantiate mechanize browser
  br = mechanize.Browser()
  try:
  	br.open("https://internet.iitb.ac.in/index.php")
  except Exception as e:
  	br.close()
  	notify("IITB Internet Login", "Error opening URL", str(e), "dialog-error")


  # Exit if not Authenticated
  if(br.geturl() == "https://internet.iitb.ac.in/index.php"):
    br.close()
    notify("IITB Internet Login", "Not Authenticated", "", "dialog-error")
    menu = getMenu(1, indicator)
    indicator.set_menu(menu)
    indicator.set_icon(os.path.abspath('.icons/disconnected-' + theme + '.svg'))
    return

  ip_list=[]
  ifaces=netifaces.interfaces()
  for interface in ifaces:
    try:
      ip_list.append(get_ip_address(interface))
    except Exception as e:
      pass
#      print "No IP address on " + interface + ": " + str(e)

  # Logout from those IPs
  for ip in ip_list:
    if(br.geturl() == "https://internet.iitb.ac.in/logout.php"):
      try:
        # ip = get_ip_address('eth0')
        br.select_form(name="auth")
        br.form["ip"] = [ip]
        # print br.form
        response = br.submit()  # submit current form
        notify("IITB Internet Login", "Logout", ip, "dialog-error")
      except Exception as e:
        pass
#        print "Error logging out | " + str(e)
    menu = getMenu(1, indicator)
    indicator.set_menu(menu)
    indicator.set_icon(os.path.abspath('.icons/disconnected-' + theme + '.svg'))


class Preferences(Gtk.Window):
  def __init__(self):
    Gtk.Window.__init__(self, title="Preferences")
    self.set_border_width(10)

    grid = Gtk.Grid()
    
    self.usernameLabel = Gtk.Label("Username")
    self.passwordLabel = Gtk.Label("Password")
    self.themeLabel = Gtk.Label("Theme")

    self.usernameEntry = Gtk.Entry()
    self.passwordEntry = Gtk.Entry()
    self.passwordEntry.set_visibility(False)
    
    self.lightRadioButton = Gtk.RadioButton.new_with_label_from_widget(None, "Light")
    self.lightRadioButton.connect("toggled", self.on_button_toggled, "light")
    self.darkRadioButton = Gtk.RadioButton.new_with_label_from_widget(self.lightRadioButton, "Dark")
    self.darkRadioButton.connect("toggled", self.on_button_toggled, "dark")
    
    self.saveButton = Gtk.Button(label="Save")
    self.saveButton.connect("clicked", self.on_save_clicked)
    self.exitButton = Gtk.Button(label="Exit")
    self.exitButton.connect("clicked", self.on_exit_clicked)
    
    grid.add(self.usernameLabel)
    grid.attach_next_to(self.usernameEntry, self.usernameLabel, Gtk.PositionType.RIGHT, 2, 1)
    grid.attach_next_to(self.passwordLabel, self.usernameLabel, Gtk.PositionType.BOTTOM, 1, 1)
    grid.attach_next_to(self.passwordEntry, self.usernameEntry, Gtk.PositionType.BOTTOM, 2, 1)
    grid.attach_next_to(self.themeLabel, self.passwordLabel, Gtk.PositionType.BOTTOM, 1, 1)
    grid.attach_next_to(self.lightRadioButton, self.passwordEntry, Gtk.PositionType.BOTTOM, 1, 1)
    grid.attach_next_to(self.darkRadioButton, self.lightRadioButton, Gtk.PositionType.RIGHT, 1, 1)
    grid.attach_next_to(self.saveButton, self.lightRadioButton, Gtk.PositionType.BOTTOM, 1, 1)
    grid.attach_next_to(self.exitButton, self.saveButton, Gtk.PositionType.RIGHT, 1, 1)

    self.themePreference = "light"

    self.add(grid)

  def on_button_toggled(self, button, name):
    self.themePreference = name

  def on_save_clicked(self, widget):
    parameters = {}
    parameters['username'] = self.usernameEntry.get_text()
    parameters['password'] = self.passwordEntry.get_text()
    parameters['theme'] = self.themePreference
    with open('.config', 'w') as outfile:
      outfile.write(json.dumps(parameters, ensure_ascii=False))
    self.destroy()

  def on_exit_clicked(self, widget):
    self.destroy()


def on_click_preferences(w):
  win = Preferences()
  win.connect("delete-event", Gtk.main_quit)
  win.show_all()
  Gtk.main()

def on_click_exit(buf):
  Gtk.main_quit()

def getMenu(loginStatus, indicator):
  menu = Gtk.Menu()

  loginItem = Gtk.MenuItem("Login")
  menu.append(loginItem)
  loginItem.set_sensitive(loginStatus)
  loginItem.show()
  loginItem.connect("activate", on_click_login, indicator)

  logoutItem= Gtk.MenuItem("Logout")
  logoutItem.set_sensitive(not loginStatus)
  menu.append(logoutItem)
  logoutItem.show()
  logoutItem.connect("activate", on_click_logout, indicator)

  separatorItem = Gtk.SeparatorMenuItem()
  menu.append(separatorItem)
  separatorItem.show()

  preferencesItem= Gtk.MenuItem("Preferences...")
  menu.append(preferencesItem)
  preferencesItem.show()
  preferencesItem.connect("activate", on_click_preferences)

  separatorItem = Gtk.SeparatorMenuItem()
  menu.append(separatorItem)
  separatorItem.show()

  exitItem = Gtk.MenuItem("Exit")
  menu.append(exitItem)
  exitItem.show()
  exitItem.connect("activate", on_click_exit)

  return menu

if __name__ == "__main__":
  config = '.config'
  if(os.path.exists(config)):
    with open(config, 'r') as infile:
      try:
        data = json.load(infile)
        global theme
        theme = data["theme"]
      except ValueError as e:
        win = Preferences()
        win.connect("delete-event", Gtk.main_quit)
        win.show_all()
        Gtk.main()
  else:
    #on_click_preferences(0)
    win = Preferences()
    win.connect("delete-event", Gtk.main_quit)
    win.show_all()
    Gtk.main()
    
  loginStatus = get_login_status()
  if(loginStatus == True):
    icon='.icons/disconnected-' + theme + '.svg'
  else:
    icon='.icons/connected-' + theme + '.svg'

  indicator = appindicator.Indicator.new (
    "IITB Internet Login",
    os.path.abspath(icon),
    appindicator.IndicatorCategory.APPLICATION_STATUS)
  indicator.set_status (appindicator.IndicatorStatus.ACTIVE)

  # create a menu
  menu = getMenu(loginStatus, indicator)

  indicator.set_menu(menu)

  Gtk.main()
